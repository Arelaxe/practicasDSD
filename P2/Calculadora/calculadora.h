/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _CALCULADORA_H_RPCGEN
#define _CALCULADORA_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


typedef struct {
	u_int t_vector_len;
	float *t_vector_val;
} t_vector;

struct potencia {
	float base;
	float exponente;
};
typedef struct potencia potencia;


struct sumar_1_argument {
	float arg1;
	float arg2;
};
typedef struct sumar_1_argument sumar_1_argument;

struct restar_1_argument {
	float arg1;
	float arg2;
};
typedef struct restar_1_argument restar_1_argument;

struct multiplicar_1_argument {
	float arg1;
	float arg2;
};
typedef struct multiplicar_1_argument multiplicar_1_argument;

struct dividir_1_argument {
	float arg1;
	float arg2;
};
typedef struct dividir_1_argument dividir_1_argument;

struct producto_escalar_1_argument {
	t_vector arg1;
	t_vector arg2;
};
typedef struct producto_escalar_1_argument producto_escalar_1_argument;

struct escalar_por_vector_1_argument {
	float arg1;
	t_vector arg2;
};
typedef struct escalar_por_vector_1_argument escalar_por_vector_1_argument;

struct suma_vectores_1_argument {
	t_vector arg1;
	t_vector arg2;
};
typedef struct suma_vectores_1_argument suma_vectores_1_argument;

struct resta_vectores_1_argument {
	t_vector arg1;
	t_vector arg2;
};
typedef struct resta_vectores_1_argument resta_vectores_1_argument;

struct producto_vectorial_1_argument {
	t_vector arg1;
	t_vector arg2;
};
typedef struct producto_vectorial_1_argument producto_vectorial_1_argument;

struct producto_mixto_1_argument {
	t_vector arg1;
	t_vector arg2;
	t_vector arg3;
};
typedef struct producto_mixto_1_argument producto_mixto_1_argument;

struct multiplicar_potencias_1_argument {
	potencia arg1;
	potencia arg2;
};
typedef struct multiplicar_potencias_1_argument multiplicar_potencias_1_argument;

struct dividir_potencias_1_argument {
	potencia arg1;
	potencia arg2;
};
typedef struct dividir_potencias_1_argument dividir_potencias_1_argument;

#define CALCULADORA 0x20000001
#define CALCULADORAVERS 1

#if defined(__STDC__) || defined(__cplusplus)
#define SUMAR 1
extern  float * sumar_1(float , float , CLIENT *);
extern  float * sumar_1_svc(float , float , struct svc_req *);
#define RESTAR 2
extern  float * restar_1(float , float , CLIENT *);
extern  float * restar_1_svc(float , float , struct svc_req *);
#define MULTIPLICAR 3
extern  float * multiplicar_1(float , float , CLIENT *);
extern  float * multiplicar_1_svc(float , float , struct svc_req *);
#define DIVIDIR 4
extern  float * dividir_1(float , float , CLIENT *);
extern  float * dividir_1_svc(float , float , struct svc_req *);
#define PRODUCTO_ESCALAR 5
extern  float * producto_escalar_1(t_vector , t_vector , CLIENT *);
extern  float * producto_escalar_1_svc(t_vector , t_vector , struct svc_req *);
#define ESCALAR_POR_VECTOR 6
extern  t_vector * escalar_por_vector_1(float , t_vector , CLIENT *);
extern  t_vector * escalar_por_vector_1_svc(float , t_vector , struct svc_req *);
#define SUMA_VECTORES 7
extern  t_vector * suma_vectores_1(t_vector , t_vector , CLIENT *);
extern  t_vector * suma_vectores_1_svc(t_vector , t_vector , struct svc_req *);
#define RESTA_VECTORES 8
extern  t_vector * resta_vectores_1(t_vector , t_vector , CLIENT *);
extern  t_vector * resta_vectores_1_svc(t_vector , t_vector , struct svc_req *);
#define PRODUCTO_VECTORIAL 9
extern  t_vector * producto_vectorial_1(t_vector , t_vector , CLIENT *);
extern  t_vector * producto_vectorial_1_svc(t_vector , t_vector , struct svc_req *);
#define PRODUCTO_MIXTO 10
extern  float * producto_mixto_1(t_vector , t_vector , t_vector , CLIENT *);
extern  float * producto_mixto_1_svc(t_vector , t_vector , t_vector , struct svc_req *);
#define MEDIA 11
extern  float * media_1(t_vector , CLIENT *);
extern  float * media_1_svc(t_vector , struct svc_req *);
#define POTENCIA 13
extern  float * potencia_1(potencia , CLIENT *);
extern  float * potencia_1_svc(potencia , struct svc_req *);
#define MULTIPLICAR_POTENCIAS 14
extern  potencia * multiplicar_potencias_1(potencia , potencia , CLIENT *);
extern  potencia * multiplicar_potencias_1_svc(potencia , potencia , struct svc_req *);
#define DIVIDIR_POTENCIAS 15
extern  potencia * dividir_potencias_1(potencia , potencia , CLIENT *);
extern  potencia * dividir_potencias_1_svc(potencia , potencia , struct svc_req *);
extern int calculadora_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define SUMAR 1
extern  float * sumar_1();
extern  float * sumar_1_svc();
#define RESTAR 2
extern  float * restar_1();
extern  float * restar_1_svc();
#define MULTIPLICAR 3
extern  float * multiplicar_1();
extern  float * multiplicar_1_svc();
#define DIVIDIR 4
extern  float * dividir_1();
extern  float * dividir_1_svc();
#define PRODUCTO_ESCALAR 5
extern  float * producto_escalar_1();
extern  float * producto_escalar_1_svc();
#define ESCALAR_POR_VECTOR 6
extern  t_vector * escalar_por_vector_1();
extern  t_vector * escalar_por_vector_1_svc();
#define SUMA_VECTORES 7
extern  t_vector * suma_vectores_1();
extern  t_vector * suma_vectores_1_svc();
#define RESTA_VECTORES 8
extern  t_vector * resta_vectores_1();
extern  t_vector * resta_vectores_1_svc();
#define PRODUCTO_VECTORIAL 9
extern  t_vector * producto_vectorial_1();
extern  t_vector * producto_vectorial_1_svc();
#define PRODUCTO_MIXTO 10
extern  float * producto_mixto_1();
extern  float * producto_mixto_1_svc();
#define MEDIA 11
extern  float * media_1();
extern  float * media_1_svc();
#define POTENCIA 13
extern  float * potencia_1();
extern  float * potencia_1_svc();
#define MULTIPLICAR_POTENCIAS 14
extern  potencia * multiplicar_potencias_1();
extern  potencia * multiplicar_potencias_1_svc();
#define DIVIDIR_POTENCIAS 15
extern  potencia * dividir_potencias_1();
extern  potencia * dividir_potencias_1_svc();
extern int calculadora_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_t_vector (XDR *, t_vector*);
extern  bool_t xdr_potencia (XDR *, potencia*);
extern  bool_t xdr_potencia (XDR *, potencia*);
extern  bool_t xdr_sumar_1_argument (XDR *, sumar_1_argument*);
extern  bool_t xdr_restar_1_argument (XDR *, restar_1_argument*);
extern  bool_t xdr_multiplicar_1_argument (XDR *, multiplicar_1_argument*);
extern  bool_t xdr_dividir_1_argument (XDR *, dividir_1_argument*);
extern  bool_t xdr_producto_escalar_1_argument (XDR *, producto_escalar_1_argument*);
extern  bool_t xdr_escalar_por_vector_1_argument (XDR *, escalar_por_vector_1_argument*);
extern  bool_t xdr_suma_vectores_1_argument (XDR *, suma_vectores_1_argument*);
extern  bool_t xdr_resta_vectores_1_argument (XDR *, resta_vectores_1_argument*);
extern  bool_t xdr_producto_vectorial_1_argument (XDR *, producto_vectorial_1_argument*);
extern  bool_t xdr_producto_mixto_1_argument (XDR *, producto_mixto_1_argument*);
extern  bool_t xdr_multiplicar_potencias_1_argument (XDR *, multiplicar_potencias_1_argument*);
extern  bool_t xdr_dividir_potencias_1_argument (XDR *, dividir_potencias_1_argument*);

#else /* K&R C */
extern bool_t xdr_t_vector ();
extern bool_t xdr_potencia ();
extern bool_t xdr_potencia ();
extern bool_t xdr_sumar_1_argument ();
extern bool_t xdr_restar_1_argument ();
extern bool_t xdr_multiplicar_1_argument ();
extern bool_t xdr_dividir_1_argument ();
extern bool_t xdr_producto_escalar_1_argument ();
extern bool_t xdr_escalar_por_vector_1_argument ();
extern bool_t xdr_suma_vectores_1_argument ();
extern bool_t xdr_resta_vectores_1_argument ();
extern bool_t xdr_producto_vectorial_1_argument ();
extern bool_t xdr_producto_mixto_1_argument ();
extern bool_t xdr_multiplicar_potencias_1_argument ();
extern bool_t xdr_dividir_potencias_1_argument ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_CALCULADORA_H_RPCGEN */
